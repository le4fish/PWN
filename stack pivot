伪造栈需要控制rip和rbp两个寄存器

一般的栈溢出有两个缺陷：
1.栈空间有限，无法写完所有的payload
2.输入函数如scanf（）或者puts（）时，遇到空格就截断

伪造主要靠两部分组成：在原函数的返回rbp处，填上伪造的基地址（想要输入的地址-8（64位），-4（32位））；在原函数的返回地址处填上leaq（leave_ret）


原理就在于进程执行了两次leaq(x86)

第一次时，
leave（mov rsp,rbp; pop rbp)
rbp指向伪造的基地址，rsp指向基地址后，自动指向返回地址（栈）
ret（pop rip)
rip再一次执行leaq

第二次时，
leave
rbp指向leaq的地址（大概,在pop时无意输入，不管），rsp指向伪造的基地址后，自动指向新的地址
ret
rip开始执行新地址命令。
