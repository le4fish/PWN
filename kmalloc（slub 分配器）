linux内核在管理内存页面时，使用伙伴算法和slub算法。

1.伙伴算法以页为单位管理内存（默认为4k），但在大多数情况下，程序需要的并不是一整页，而是几个、几十个字节的小内存。

于是需要另外一套系统来完成对小内存的管理，这就是slub系统。slub系统运行在伙伴系统之上，为内核提供小内存管理的功能。

2.多年以来，SLAB成为linux kernel对象缓冲区管理的主流算法，甚至长时间没有人愿意去修改，因为它实在是非常复杂。
 
 但是，随着大规模多处理器系统和 NUMA系统的广泛应用，SLAB 分配器逐渐暴露出自身的严重不足：

    1). 缓存队列管理复杂；

    2). 管理数据存储开销大；

    3). 对NUMA支持复杂；

    4). 调试调优困难；

    5). 摒弃了效果不太明显的slab着色机制；

3.在Linux内核2.6.22版本中引入一种新的解决方案：SLUB分配器。

SLUB分配器特点是简化设计理念，同时保留SLAB分配器的基本思想：每个缓冲区由多个小的slab 组成，每个 slab 包含固定数目的对象。

SLUB分配器简化kmem_cache，slab等相关的管理数据结构，摒弃了SLAB 分配器中众多的队列概念，

并针对多处理器、NUMA系统进行优化，从而提高了性能和可扩展性并降低了内存的浪费。

为了保证内核其它模块能够无缝迁移到SLUB分配器，SLUB还保留了原有SLAB分配器所有的接口API函数。


## SLUB分配器的初始化

SLUB初始化有两个重要的工作：
第一，创建用于申请struct kmem_cache和struct kmem_cache_node的kmem_cache；

第二，创建用于常规kmalloc的kmem_cache。 
