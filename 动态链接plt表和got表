程序在编译时，程序的函数可能需要从动态链接库来获取，但此时并不知道库的地址，所以函数地址取值为0。
等到运行时，再去寻址，再修改。

很容易想到，此时修改.text的地址来链接库，但是这有两个问题
1.程序的.text段没有修改的权限
2.如果函数也在一个动态库中，由于它在各个进程的加载地址不同，所以不能共享于所有进程。

计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。

所以我们在.text段最后新加一段代码，成为plt表，又在.data段里加一段跳转地址，成为got表。

首先要知道plt表的第一项（此项两句）是公共项。

got表的前三句分别保存，.dynamic地址、本镜像的link_map数据结构地址、_dl_runtime_resolve函数地址，
后两句是在进程启动时，由动态链接器确定（链接器靠.dynamic段来寻找got表）。

程序运行，直至将使用函数时，进程会开始重定位，先跳转至plt表的此函数指定处，每个函数在此处都有三条语句，跳转到第一条语句就开始重定位流程。

第一条语句就是跳转到got表的指定处数据所指的地址（可以把它理解成指针），此刻got表的指定处所指的地址是第二条语句。

第二条语句，它将存入栈帧此函数的id，也就是排除公共项后的关于plt表头的偏移量。

第三条语句，表明跳转到plt表公共项。

跳转到公共项后，第一条语句是存入栈桢got表的第二句。

第二条语句是，跳转至got表的第三句数据所指的地址。

最后，_dl_runtime_resolve函数会做两件事情，

其一，根据函数id来修改got表指定位置数据，使其改成真正动态库函数地址。

其二，寻找到真正动态库函数地址后，把地址返回给进程使用函数处，调用它。

第一次调用如此漫长，导致动态库比静态库慢1%-5%，但从第二次开始，直接
Call》plt》got》动态库 来快速调用。



