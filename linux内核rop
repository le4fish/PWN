在linux内核里中构造rop链，其实和用户空间里的基本原理不变。

一.要注意的是，内核空间基本都位于内存的高地址地区，和用户空间分离。并且，保护措施主要有 kaslr，smap，smep

1.kaslr

即kptr_ restrict指示是否限制通过/ proc和其他接口暴露内核地址。

    0：默认情况下，没有任何限制。
    1：使用％pK格式说明符打印的内核指针将被替换为0，除非用户具有CAP_ SYSLOG特权
    2：使用％pK打印的内核指针将被替换为0而不管特权。


2.SMAP(Supervisor Mode Access Prevention)和SMEP(Supervisor Mode Execution Prevention)
作用是      禁止内核访问用户空间的数据             和禁止内核执行用户空间的代码。

分别位于CR4寄存器 第21位 和 第20位
arm里面叫 PXN(Privilege Execute Never) 和PAN(Privileged Access Never)。

SMEP类似于前面说的NX，不过一个是在内核态中，一个是在用户态中。

和NX一样SMAP/SMEP需要处理器支持，可以通过cat /proc/cpuinfo查看，在内核命令行中添加nosmap和nosmep禁用。


二.相比用户态库函数，内核态的函数有了一些变化

    printf() -> printk()，但需要注意的是 printk() 不一定会把内容显示到终端上，但一定在内核缓冲区里，可以通过 dmesg 查看效果
    
    memcpy() -> copy_from_user()/copy_to_user()
    
        1.copy_from_user() 实现了将用户空间的数据传送到内核空间
      
        2.copy_to_user() 实现了将内核空间的数据传送到用户空间
        
    malloc() -> kmalloc()，内核态的内存分配函数，和 malloc() 相似，但使用的是 slab/slub 分配器
    
    free() -> kfree()，同 kmalloc()
    
从进程中获取shell，使用 system("/bin/sh") 函数；而想要获取root权限，就要使用 commit_creds(prepare_kernel_cred(0)) 来提权。

原型为 ：
    int commit_creds(struct cred *new)
    struct cred* prepare_kernel_cred(struct task_struct* daemon)

kernel 管理进程，因此 kernel 也记录了进程的权限。

两个函数的地址都可以在 /proc/kallsyms 中查看（较老的内核版本中是 /proc/ksyms),

并且在非root权限下，使用 sudo sysctl -w kernel.kptr_restrict=0 之后才能查看。
    

三、ret2usr（没有smep的保护时）
利用了用户空间进程不能访问内核空间，但是内核空间能访问用户空间这个特性来重定向内核代码或数据流指向用户空间，并在非root权限下进行提权。

将损坏的代码或数据指针重定向到用户空间中

1.需要找一个函数指针来覆盖。

2.在这里我们通常使用 ptmx_fops->release() 这个指针来指向要重写的内核空间。
在内核空间中，ptmx_fops作为静态变量存在，它包含一个指向/ dev / ptmx的file_operations结构的指针。 
file_operations结构包含一个函数指针，当对文件描述符执行诸如读/写操作时，该函数指针被执行。

3.在用户空间中使用mmap提权payload，分配新的凭证结构：

4.在用户空间创建一个新的结构体“A”。

5.用提权函数指针来覆盖这个"A"的指针。

6.触发提权函数，执行iretq返回用户空间，执行system("/bin/sh")提权

int __attribute__((regparm(3))) (*commit_creds)(unsigned long cred);
unsigned long __attribute__((regparm(3))) (*prepare_kernel_cred)(unsigned long cred);
commit_creds = 0xffffffffxxxxxxxx;//需要提前确定
prepare_kernel_cred = 0xffffffffxxxxxxxx;//需要提前确定
void escalate_privs() { commit_creds(prepare_kernel_cred(0)); }  //获取root权限


四、内核rop（绕过smep）

|----------------------|
| pop rdi; ret         |<== low mem
|----------------------|
| NULL                 |
|----------------------|
| addr of              |
| prepare_kernel_cred()|
|----------------------|
| mov rdi, rax; ret    |
|----------------------|
| addr of              |
| commit_creds()       |<== high mem
|----------------------|

2.寻找rop链
同用户空间的ROP一样我们还是需要找gadget，内核空间的gadget也是可以简单地从内核二进制文件中提取的。

首先使用extract-vmlinux脚本来解压/boot/vmlinuz*这个压缩内核镜像。

extract-vmlinux位于/usr/src/linux-headers-xx/scripts目录。

用这个命令解压vmlinuz并保存到vmlinux：

sudo ./extract-vmlinux /boot/vmlinuz-xx > vmlinux

之后就可以用ROPgadget来获取gadget了，最好是一次性把gadget都写到一个文件中。

ROPgadget --binary vmlinux > ~/ropgadget

3.Stack Pivot
在64位的系统中使用这里的xchg rXx, rsp ; ret（xchg rsp, rXx ; ret）32位的寄存器，

即xchg eXx, esp; ret或xchg esp, eXx ; ret。

这样做其实是当rXx中包含有效的内核内存地址时，就把rXx的低32位设置为新的栈指针。（rsp就从内核地址转移去用户地址）

4.完整rop链
使用iretq指令返回到用户空间，在执行iretq之前，执行swapgs指令。

该指令通过用一个MSR中的值交换GS寄存器的内容，用来获取指向内核数据结构的指针，然后才能执行系统调用之类的内核空间程序。

iretq的堆栈布局有五层。

|----------------------|
| pop rdi; ret         |<== low mem
|----------------------|
| NULL                 |
|----------------------|
| addr of              |
| prepare_kernel_cred()|
|----------------------|
| pop rdx; ret         |
|----------------------|
| addr of              |
| commit_creds()       |
|----------------------|
| mov rdi, rax ;       |
| call rdx             |
|----------------------|
| swapgs;              |
| pop rbp; ret         |
|----------------------|
| 0xdeadbeefUL         |
| iretq;               |
|----------------------|
| system("/bin/sh")    |
|----------------------|
| CS                   |
|----------------------|
| EFLAGS               |
|----------------------|
| RSP                  |
|----------------------|
| SS                   |<== high mem
|----------------------|

5.简单绕过SMEP的方法
使用ROP翻转CR4的第20位并禁用SMEP，然后再执行commit_creds(prepare_kernel_cred(0))获取root权限。

pop rdi; ret
0x6f0
mov CR4, rdi; ret
commit_creds(prepare_kernel_cred(0))
swapgs
iretq
RIP
CS
EFLAGS
RSP
SS
