linux下的堆分配机制，glibc 由 ptmalloc 机制来管理。

fastbin主要管理总大小在0x20-0x80字节的堆。在fastbin下会发生，use after free漏洞、double free漏洞。

值得注意的是，其中0x10个字节分别给 prev_size 和 size 各0x8个字节。free时多出 fd 和 bk 两个指针。

（在32位时，指针空间减少一半，各自为0x4字节，其他原理不变，但计算注意）

prev_size里是上一个分配堆的辅助存储空间，要注意 辅助空间不算在上个堆空间里size的大小，只有上一个堆被free，prev_size里存上一个堆空间大小

size里存储本堆的大小，由于空间一定大于4个字节，最后三个bit位变成标志位，从小到大分别是p，m，n：是为

PREV_INUSE(P): 表示前一个chunk是否为allocated。

IS_MMAPPED(M)：表示当前chunk是否是通过mmap系统调用产生的。

NON_MAIN_ARENA(N)：表示当前chunk是否是thread arena。



fastbin是唯一 一个单链表的bin，后删除的置于链尾，fd指向前一个prev_size地址，且fastbin不会合并。

当堆进入fastbin后，malloc同等大小时，先从fastbin中获取。


漏洞：

uaf 是堆中有指针时可以考虑，在堆被free后，指向chunk指针没有被置零，重新malloc时，可能原本的控制chunk变成了数据chunk，就可以控制指针来提shell。

例如：malloc(0x8,xx);malloc(0x8,xx);free(0);free(1);malloc(0x8,xx);show(0)









double free 是堆被free进入fastbin后，函数没有检测是否已被free，而系统本身只会检查在链尾的元素是否被二次free

例如：malloc(0x8,xx);malloc(0x8,xx);free(0);free(1);free（0）

因为fastbin中堆的fd指向前一个堆，所以0，1 已经变成循坏链表。之后再重新申请，把fd修改成可控地址（fd为首0x8个字节），

要注意 可控地址的第二个0x8字节中的值需要和malloc其时的大小一致（末尾字节不需要），才可以伪造堆地址，但不检查指针地址是否对齐。

例如：可以转移到__malloc_hook-0x13的地址，它的伪造大小为7f，可以malloc 0x60 或者 0x68.它在破坏性free（double free top）时可以触发。

（并且one_gadget得出的地址有限制，它由execve('/bin/sh', （限制条件）, environ)组成(malloc_hook基本是第三个one_gadget））


free_hook 它一般都为 0 ，可以修改其上内容，在free时，若不为零会先执行其上的内容。
malloc_hook 一般chunk被freed后，都会产生，下一次malloc直接获取。


释放在 unsorted 里的chunk，只要malloc <= size就可以从中申请。

malloc时，malloc一个size为 0 的空间， 可以泄露libc地址（free时暴露的arena完全没刷新）









house of spirit  思路是首先 free 你要任意分配的地址，然后这个地址就会在再次分配的时候被分配到，大小处于fastbin范围

前提 ：free的参数可控（可以通过栈溢出、堆溢出来覆盖），可以指向欲分配的地址。 欲分配的地址要求内容可控，可以提前构造伪chunk。

在欲分配的地址上构造伪chunk。由于堆的检验机制，要求构造连续的两个伪chunk。比如 0， size+1， 空间（size）， 0， size+1（后一个chunk验证可能没有）

再次分配就可以在指定地点分配chunk了，就可以通过 edit 等功能来提shell






堆指针置零时，很多方法都不能用，看看有否数组反向显示的漏洞（比如：a[-1])
