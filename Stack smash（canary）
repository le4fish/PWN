在libc链接库中，有一个环境变量函数，———— environ ，它在程序一次运行的过程中保持不变。

gdb查看一般用p *environ 命令 

我们可以把它当作一个标志地址，通过查看目标地址和environ的距离，在输出时，对 environ 进行加减修改来显示目标地址

canary在不能在溢出最后一位后打印出来时，还可以利用 __stack_chk_fail 函数。（此技术很可能无法提权）

void __attribute__ ((noreturn)) __stack_chk_fail (void)
{
  __fortify_fail ("stack smashing detected");
}

void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)
{
  /* The loop is added only to keep gcc happy.  */
  while (1)
    __libc_message (2, "*** %s ***: %s terminated\n", msg, __libc_argv[0] ?: "<unknown>");
}

canary比较错误后，程序就会执行 __stack_chk_fail 函数来打印 argv[0] 指针所指向的字符串，就是程序的路径名称。

可以把目标地址覆盖指向 argv[0] 的地址，gdb在栈中寻找时，可以用 stack 命令 （可能在程序进入时，显示过此地址，需要记录一下）

当然，它其实已经报错，进入退出模式，如果没有 fork 模式等，此技术要慎重考虑。
